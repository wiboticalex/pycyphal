#!/usr/bin/env -S yakut --verbose orchestrate
# Read the docs: yakut orchestrate --help

# Shared environment variables for all nodes/processes
YAKUT_TRANSPORT:      UDP('127.9.0.111')
YAKUT_COMPILE_OUTPUT: .yakut_compiled
YAKUT_PATH:           .yakut_compiled

# Shared registers for all nodes/processes (can be overridden or removed in local scopes)
uavcan:   # See the docs for make_node() to see which registers can be used.
  # Redundant transport, UDP+Serial:
  udp.ip:       127.9.0.0
  serial.port:  socket://localhost:50905
  diagnostic:
    severity: 2
    timestamp: true

# Keys with "=" define imperatives rather than registers or environment variables.
main=:
- ?=: '[ ! -d $YAKUT_COMPILE_OUTPUT ]'  # If the output directory does not exist, run the Yakut DSDL compiler.
  main=:                                # All script statements run concurrently.
  - echo "Compiling DSDL for Yakut, this may take a while"
  - yakut compile custom_data_types/sirius_cyber_corp public_regulated_data_types/uavcan

- # An empty statement is a join statement -- wait for the previously launched processes to exit before continuing.

- yakut sub uavcan.diagnostic.Record.1.1  # Print diagnostic messages in the terminal that runs the orchestrator.

- main=:              # Run the application and print subject "heater_voltage"
  - |                 # Wait a few seconds to let the diagnostic subscriber get ready.
    sleep 2
    ./demo_app.py
  - yakut sub -M ${UAVCAN__PUB__HEATER_VOLTAGE__ID__NATURAL16}.uavcan.si.unit.voltage.Scalar.1.0
  # Exit automatically if STOP_AFTER is defined (frankly this is just to simplify automatic testing)
  - ?=: test -n "$STOP_AFTER"
    main=: sleep $STOP_AFTER && exit 111
  # Registers for this composition specifically (not visible outside of this block)
  uavcan:
    node.id: 42
    sub:
      temperature_setpoint.id:    2345
      temperature_measurement.id: 2346
    pub:
      heater_voltage.id: 2347
    srv:
      least_squares.id: 123
  thermostat:
    pid.gains: [0.1, 0, 0]
